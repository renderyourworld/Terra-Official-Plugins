apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Values.name }}"
  annotations:
    juno-innovations.com/shared: "none"    # comma separated list of users that can access this workload as read only.
    juno-innovations.com/workload: "Application"  # mark this as a workload and it's type for the frontend UI
    juno-innovations.com/kuiper-state: "{{ .Values._kuiper }}"
  labels:
    juno-innovations.com/app: "polaris"
    juno-innovations.com/workstation: "{{ .Values.name }}"
    juno-innovations.com/user: "{{ .Values.user }}"
    juno-innovations.com/session: "{{ .Values.session }}"


spec:
  replicas: 1

  selector:
    matchLabels:
      juno-innovations.com/workstation: "{{ .Values.name }}"

  template:
    metadata:
      labels:
        juno-innovations.com/app: polaris
        juno-innovations.com/user: "{{ .Values.user }}"
        juno-innovations.com/workstation: "{{ .Values.name }}"
      annotations:
        # This will block the cluster autoscaler from evicting this pod in the case
        # it can move to a cheaper instance. This does come at a cost, but ideally
        # this should stop from a workstation getting ripped out from under existing users.
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"

    spec:
      automountServiceAccountToken: false
      hostname: "{{ .Values.name }}"

      # workstation nodes will require juno-innovations.com/workstation: "true"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: juno-innovations.com/workstation
                    operator: In
                    values:
                      - "true"
                  {{- if .Values.selector }}
                  {{- range .Values.selector }}
                  - key: {{ .key | quote }}
                    operator: In
                    values:
                      - {{ .value | quote }}
                  {{- end }}
                  {{- end }}

      # allow for this pod to work on nodes reserved for workstations
      tolerations:
        - key: "juno-innovations.com/workstation"
          operator: "Exists"
          effect: "NoSchedule"

      {{- if .Values.gpu }}
      runtimeClassName: nvidia
      {{- end }}

      {{- if .Values.pullSecret }}
      imagePullSecrets:
        - name: "{{ .Values.pullSecret }}"
      {{- end }}

      containers:
        - name: polaris
          imagePullPolicy: IfNotPresent
          image: "{{ .Values.registry }}/{{ .Values.repo }}:{{ .Values.tag }}"
          resources:
            requests:
              memory: "{{ .Values.memory }}"
              cpu: "{{ .Values.cpu }}"
            # gotmpl's or is a function taking 2 args - this is "X or Y or Z" translated to python
            limits:
              nvidia.com/gpu: "1"
            {{- if .Values.cpuLimit }}
              cpu: "{{ .Values.cpuLimit }}"
            {{- end }}
            {{- if .Values.memoryLimit }}
              memory: "{{ .Values.memoryLimit }}"
            {{- end }}
          startupProbe:
            httpGet:
              path: "/"
              port: 8188
            initialDelaySeconds: 2 # helios boots very fast
            failureThreshold: 60  # start up totals 2 * 60 = 2 mins
            periodSeconds: 2
          livenessProbe:
            httpGet:
              path: "/"
              port: 8188
            failureThreshold: 24
            periodSeconds: 5
          ports:
            - containerPort: 3000
              name: viewer
            - containerPort: 8188
              name: comfyui
            - containerPort: 8189
              name: worker-a
            - containerPort: 8190
              name: worker-b
          env:
            - name: JUNO_WORKSTATION
              value: "{{ .Values.name }}"
            - name: JUNO_PROJECT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: USER
              value: "{{ .Values.user }}"
            - name: HOME
              value: "/home/{{ .Values.user }}"
            - name: UID
              value: "{{ .Values.puid }}"
            - name: GID
              value: "{{ .Values.guid }}"
            - name: PREFIX
              value: "/polaris/{{ .Values.name }}/"
            - name: COMFYUI  # let the plugin know we are COMFYUI
              value: "true"
            - name: IDLE_TIME
              value: "99999999" # never let this machine auto shutdown
            {{- range .Values.env }}
            - name: {{ .name | quote }}
              value: {{ .value | quote }}
            {{- end }}
          volumeMounts:
            - name: nginx
              mountPath: "/etc/helios/init.d/nginx/entrypoint.sh"
              subPath: entrypoint.sh
            - name: nginx
              mountPath: /tmp/nginx.conf
              subPath: nginx.conf
            {{- if .Values.volumeMounts }}
            {{- toYaml .Values.volumeMounts | nindent 12 }}
            {{- end }}
            {{- if .Values.plugins }}
            {{- range .Values.plugins }}
            - name: {{ .name | quote }}
              subPath: {{ .file | quote }}
              mountPath: "/etc/helios/init.d/{{ .name }}/{{ .file }}"
            {{- end }}
            {{- end }}
      volumes:
        - name: nginx
          configMap:
            name: "{{ .Values.name }}"
            defaultMode: 0777
        {{- if .Values.volumeMounts }}
        {{- toYaml .Values.volumes | nindent 8 }}
        {{- end }}
        {{- if .Values.plugins }}
        {{- range .Values.plugins }}
        - name: {{ .name | quote }}
          configMap:
            name: {{ .config | quote }}
            defaultMode: 0777
        {{- end }}
        {{- end }}
